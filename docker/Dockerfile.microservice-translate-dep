ARG UBUNTU_VERSION=18.04
ARG CUDA_VERSION=10.0
FROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu${UBUNTU_VERSION} as builder

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        apt-transport-https \
        build-essential \
        ca-certificates \
        python3-dev \
        gnupg2 \
        wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /root

ENV CMAKE_VERSION=3.18.4
RUN wget -q https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz && \
    tar xf *.tar.gz && \
    rm *.tar.gz
ENV PATH=$PATH:/root/cmake-$CMAKE_VERSION-Linux-x86_64/bin

ENV ONEAPI_VERSION=2021.1.1
ENV MKL_BUILD=52
ENV DNNL_BUILD=55
RUN wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    apt-key add *.PUB && \
    rm *.PUB && \
    echo "deb https://apt.repos.intel.com/oneapi all main" > /etc/apt/sources.list.d/oneAPI.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        intel-oneapi-mkl-devel=$ONEAPI_VERSION-$MKL_BUILD \
        intel-oneapi-dnnl-devel=$ONEAPI_VERSION-$DNNL_BUILD \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /root/ctranslate2-dev

COPY third_party third_party
COPY cli cli
COPY include include
COPY src src
COPY CMakeLists.txt .

ARG CXX_FLAGS
ENV CXX_FLAGS=${CXX_FLAGS}
ARG CUDA_NVCC_FLAGS
ENV CUDA_NVCC_FLAGS=${CUDA_NVCC_FLAGS:-"-Xfatbin -compress-all"}
ARG CUDA_ARCH_LIST
ENV CUDA_ARCH_LIST=${CUDA_ARCH_LIST:-"Common"}
ENV CTRANSLATE2_ROOT=/root/ctranslate2

RUN mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=${CTRANSLATE2_ROOT} \
          -DCMAKE_PREFIX_PATH=${DNNL_DIR} -DWITH_DNNL=ON -DOPENMP_RUNTIME=INTEL \
          -DWITH_CUDA=ON \
          -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" \
          -DCUDA_NVCC_FLAGS="${CUDA_NVCC_FLAGS}" -DCUDA_ARCH_LIST="${CUDA_ARCH_LIST}" .. && \
    VERBOSE=1 make -j4 && \
    make install

ENV LANG=en_US.UTF-8
COPY README.md .
COPY python python

WORKDIR /root/ctranslate2-dev/python
RUN wget -nv https://bootstrap.pypa.io/get-pip.py && \
    python3 get-pip.py && \
    python3 -m pip --no-cache-dir install -r install_requirements.txt && \
    python3 setup.py bdist_wheel && \
    rm -r build && \
    rm get-pip.py && \
    cp install_requirements.txt /root/ctranslate2/ && \
    python3 setup.py sdist && \
    mv dist/* /root/ctranslate2 && \
    rmdir dist

WORKDIR /root
RUN cp -P /opt/intel/oneapi/dnnl/latest/cpu_iomp/lib/*.so* /root/ctranslate2/lib && \
    cp -P /opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin/libiomp5.so /root/ctranslate2/lib && \
    cp $(ldconfig -p | grep 'libcublas.*\.so\..*' | tr ' ' '\n' | grep /) /root/ctranslate2/lib

FROM nvidia/cuda:${CUDA_VERSION}-base-ubuntu${UBUNTU_VERSION}

#microservice dep
ARG LIB_MONGOC_VERSION=1.14.0
ARG LIB_THRIFT_VERSION=0.12.0
ARG LIB_JSON_VERSION=3.6.1
ARG LIB_JAEGER_VERSION=0.4.2
ARG LIB_YAML_VERSION=0.6.2
ARG LIB_OPENTRACING_VERSION=1.5.1
ARG LIB_CPP_JWT_VERSION=1.1.1
ARG LIB_CPP_REDIS_VERSION=4.3.1
ARG LIB_AMQP_CPP_VERSION=4.1.4
ARG LIB_SIMPLEAMQPCLIENT_VERSION=2.4.0

ARG NUM_CPUS=56
ARG BUILD_DEPS="ca-certificates g++ cmake wget git libmemcached-dev automake bison flex libboost-all-dev libevent-dev libssl-dev libtool make pkg-config librabbitmq-dev"
#microserive dep end

COPY --from=builder /root/ctranslate2 /opt/ctranslate2

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3-distutils \
        ${BUILD_DEPS} \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/* \
    # Install mongo-c-driver
    && cd /tmp \
    && wget https://github.com/mongodb/mongo-c-driver/releases/download/${LIB_MONGOC_VERSION}/mongo-c-driver-${LIB_MONGOC_VERSION}.tar.gz \
    && tar -zxf mongo-c-driver-${LIB_MONGOC_VERSION}.tar.gz \
    && cd mongo-c-driver-${LIB_MONGOC_VERSION} \
    && mkdir -p cmake-build \
    && cd cmake-build \
    && cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 .. \
    && make -j${NUM_CPUS} \
    && make install \
    && cd /tmp \
    # Install lib-thrift
    && wget -O thrift-${LIB_THRIFT_VERSION}.tar.gz https://github.com/apache/thrift/archive/v${LIB_THRIFT_VERSION}.tar.gz \
    && tar -zxf thrift-${LIB_THRIFT_VERSION}.tar.gz \
    && cd thrift-${LIB_THRIFT_VERSION} \
    && mkdir -p cmake-build \
    && cd cmake-build \
    && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=0 .. \
    && make -j${NUM_CPUS} \
    && make install \
    && cd /tmp \
    # Install /nlohmann/json
    && wget -O json-${LIB_JSON_VERSION}.tar.gz https://github.com/nlohmann/json/archive/v${LIB_JSON_VERSION}.tar.gz \
    && tar -zxf json-${LIB_JSON_VERSION}.tar.gz \
    && cd json-${LIB_JSON_VERSION} \
    && mkdir -p cmake-build \
    && cd cmake-build \
    && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=0 .. \
    && make -j${NUM_CPUS} \
    && make install \
    && cd /tmp \
    # Install yaml-cpp
    && wget -O yaml-cpp-${LIB_YAML_VERSION}.tar.gz https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-${LIB_YAML_VERSION}.tar.gz \
    && tar -zxf yaml-cpp-${LIB_YAML_VERSION}.tar.gz \
    && cd yaml-cpp-yaml-cpp-${LIB_YAML_VERSION} \
    && mkdir -p cmake-build \
    && cd cmake-build \
    && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-fPIC" -DYAML_CPP_BUILD_TESTS=0 .. \
    && make -j${NUM_CPUS} \
    && make install \
    && cd /tmp \
    # Install opentracing-cpp
    && wget -O opentracing-cpp-${LIB_OPENTRACING_VERSION}.tar.gz https://github.com/opentracing/opentracing-cpp/archive/v${LIB_OPENTRACING_VERSION}.tar.gz \
    && tar -zxf opentracing-cpp-${LIB_OPENTRACING_VERSION}.tar.gz \
    && cd opentracing-cpp-${LIB_OPENTRACING_VERSION} \
    && mkdir -p cmake-build \
    && cd cmake-build \
    && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-fPIC" -DBUILD_TESTING=0 .. \
    && make -j${NUM_CPUS} \
    && make install \
    && cd /tmp \
    # Install jaeger-client-cpp
    && wget -O jaeger-client-cpp-${LIB_JAEGER_VERSION}.tar.gz https://github.com/jaegertracing/jaeger-client-cpp/archive/v${LIB_JAEGER_VERSION}.tar.gz \
    && tar -zxf jaeger-client-cpp-${LIB_JAEGER_VERSION}.tar.gz \
    && cd jaeger-client-cpp-${LIB_JAEGER_VERSION} \
    && mkdir -p cmake-build \
    && cd cmake-build \
    && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-fPIC" -DHUNTER_ENABLED=0 -DBUILD_TESTING=0 -DJAEGERTRACING_WITH_YAML_CPP=1 -DJAEGERTRACING_BUILD_EXAMPLES=0 .. \
    && make -j${NUM_CPUS} \
    && make install \
    && cd /tmp \
    # Install jwt
    && wget -O cpp-jwt-${LIB_CPP_JWT_VERSION}.tar.gz https://github.com/arun11299/cpp-jwt/archive/v${LIB_CPP_JWT_VERSION}.tar.gz \
    && tar -zxf cpp-jwt-${LIB_CPP_JWT_VERSION}.tar.gz \
    && cd cpp-jwt-${LIB_CPP_JWT_VERSION} \
    && cp -R include/jwt /usr/local/include \
    # use the dependency in /usr/local/include instead of in jwt/json
    && rm -rf /usr/local/include/jwt/json \
    && sed -i 's/\#include \"jwt\/json\/json.hpp\"/\#include \<nlohmann\/json\.hpp\>/g' /usr/local/include/jwt/jwt.hpp \
    # Install cpp_redis
    && cd /tmp \
    && git clone https://github.com/cpp-redis/cpp_redis.git \
    && cd cpp_redis && git checkout ${LIB_CPP_REDIS_VERSION} \
    && git submodule init && git submodule update \
    && mkdir cmake-build && cd cmake-build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release \
    && make -j${NUM_CPUS} \
    && make install \
    # Install AMQP-CPP
    && cd /tmp \
    && git clone https://github.com/CopernicaMarketingSoftware/AMQP-CPP.git \
    && cd AMQP-CPP && git checkout v${LIB_AMQP_CPP_VERSION} \
    && mkdir cmake-build && cd cmake-build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release -DAMQP-CPP_BUILD_SHARED=on -DAMQP-CPP_LINUX_TCP=on \
    && make -j${NUM_CPUS} && make install \
    # Install SimpleAmqpClient
    && cd /tmp \
    && git clone https://github.com/alanxz/SimpleAmqpClient.git \
    && cd SimpleAmqpClient \
    && git checkout v${LIB_SIMPLEAMQPCLIENT_VERSION} \
    && mkdir cmake-build && cd cmake-build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release \
    && make -j${NUM_CPUS} \
    && make install \
    && cd /tmp \
    && rm -rf \
    mongo-c-driver-${LIB_MONGOC_VERSION}.tar.gz \
    mongo-c-driver-${LIB_MONGOC_VERSION} \
    thrift-${LIB_THRIFT_VERSION}.tar.gz \
    thrift-${LIB_THRIFT_VERSION} \
    json-${LIB_JSON_VERSION}.tar.gz \
    json-${LIB_JSON_VERSION} \
    jaeger-client-cpp-${LIB_JAEGER_VERSION}.tar.gz \
    jaeger-client-cpp-${LIB_JAEGER_VERSION} \
    yaml-cpp-${LIB_YAML_VERSION}.tar.gz \
    yaml-cpp-yaml-cpp-${LIB_YAML_VERSION} \
    opentracing-cpp-${LIB_OPENTRACING_VERSION}.tar.gz \
    opentracing-cpp-${LIB_OPENTRACING_VERSION} \
    cpp-jwt-${LIB_CPP_JWT_VERSION}.tar.gz \
    cpp-jwt-${LIB_CPP_JWT_VERSION} \
    cpp_redis \
    AMQP-CPP \
    SimpleAmqpClient \
    && wget -nv https://bootstrap.pypa.io/get-pip.py \
    && python3 get-pip.py \
    && python3 -m pip --no-cache-dir install /opt/ctranslate2/*cp3*.whl \
    && rm get-pip.py

ENV CTRANSLATE2_ROOT=/opt/ctranslate2
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CTRANSLATE2_ROOT/lib:/usr/local/lib

RUN ldconfig
